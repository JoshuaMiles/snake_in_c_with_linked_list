   1               		.file	"graphics.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.show_screen,"ax",@progbits
  11               	.global	show_screen
  13               	show_screen:
  14               	.LFB1:
  15               		.file 1 "graphics.c"
   1:graphics.c    **** /*
   2:graphics.c    **** *	CAB202 Teensy Library: 'cab202_teensy'
   3:graphics.c    **** *	graphics.c
   4:graphics.c    **** *
   5:graphics.c    **** *	B.Talbot, September 2015
   6:graphics.c    **** *	Queensland University of Technology
   7:graphics.c    **** */
   8:graphics.c    **** #include <avr/pgmspace.h>
   9:graphics.c    **** #include "graphics.h"
  10:graphics.c    **** #include "macros.h"
  11:graphics.c    **** 
  12:graphics.c    **** unsigned char screen_buffer[LCD_BUFFER_SIZE];
  13:graphics.c    **** 
  14:graphics.c    **** /*
  15:graphics.c    ****  * Function implementations
  16:graphics.c    ****  */
  17:graphics.c    **** void show_screen(void) {
  16               		.loc 1 17 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  18:graphics.c    ****     // Reset our position in the LCD RAM
  19:graphics.c    ****     lcd_position(0, 0);
  30               		.loc 1 19 0
  31 0004 60E0      		ldi r22,0
  32 0006 80E0      		ldi r24,0
  33 0008 0E94 0000 		call lcd_position
  34               	.LVL0:
  35 000c C0E0      		ldi r28,lo8(screen_buffer)
  36 000e D0E0      		ldi r29,hi8(screen_buffer)
  37               	.LVL1:
  38               	.L2:
  20:graphics.c    **** 
  21:graphics.c    ****     // Iterate through our buffer and write each byte to the LCD.
  22:graphics.c    ****     unsigned int i;
  23:graphics.c    ****     for (i = 0; i < LCD_BUFFER_SIZE; i++) {
  24:graphics.c    ****         lcd_write(LCD_D, screen_buffer[i]);
  39               		.loc 1 24 0 discriminator 3
  40 0010 6991      		ld r22,Y+
  41               	.LVL2:
  42 0012 81E0      		ldi r24,lo8(1)
  43 0014 0E94 0000 		call lcd_write
  44               	.LVL3:
  23:graphics.c    ****         lcd_write(LCD_D, screen_buffer[i]);
  45               		.loc 1 23 0 discriminator 3
  46 0018 80E0      		ldi r24,hi8(screen_buffer+504)
  47 001a C030      		cpi r28,lo8(screen_buffer+504)
  48 001c D807      		cpc r29,r24
  49 001e 01F4      		brne .L2
  50               	/* epilogue start */
  25:graphics.c    ****     }
  26:graphics.c    **** }
  51               		.loc 1 26 0
  52 0020 DF91      		pop r29
  53 0022 CF91      		pop r28
  54               	.LVL4:
  55 0024 0895      		ret
  56               		.cfi_endproc
  57               	.LFE1:
  59               		.section	.text.clear_screen,"ax",@progbits
  60               	.global	clear_screen
  62               	clear_screen:
  63               	.LFB2:
  27:graphics.c    **** 
  28:graphics.c    **** void clear_screen(void) {
  64               		.loc 1 28 0
  65               		.cfi_startproc
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  70               	.LVL5:
  71 0000 E0E0      		ldi r30,lo8(screen_buffer)
  72 0002 F0E0      		ldi r31,hi8(screen_buffer)
  73               	.LVL6:
  74               	.L6:
  29:graphics.c    ****     // Set every byte in the buffer to 0b00000000
  30:graphics.c    ****     unsigned int i;
  31:graphics.c    ****     for (i = 0; i < LCD_BUFFER_SIZE; i++) {
  32:graphics.c    ****         screen_buffer[i] = 0;
  75               		.loc 1 32 0 discriminator 3
  76 0004 1192      		st Z+,__zero_reg__
  77               	.LVL7:
  31:graphics.c    ****         screen_buffer[i] = 0;
  78               		.loc 1 31 0 discriminator 3
  79 0006 80E0      		ldi r24,hi8(screen_buffer+504)
  80 0008 E030      		cpi r30,lo8(screen_buffer+504)
  81 000a F807      		cpc r31,r24
  82 000c 01F4      		brne .L6
  83               	/* epilogue start */
  33:graphics.c    ****     }
  34:graphics.c    **** }
  84               		.loc 1 34 0
  85 000e 0895      		ret
  86               		.cfi_endproc
  87               	.LFE2:
  89               		.section	.text.set_pixel,"ax",@progbits
  90               	.global	set_pixel
  92               	set_pixel:
  93               	.LFB3:
  35:graphics.c    **** 
  36:graphics.c    **** void set_pixel(unsigned char x, unsigned char y, unsigned char value) {
  94               		.loc 1 36 0
  95               		.cfi_startproc
  96               	.LVL8:
  97               	/* prologue: function */
  98               	/* frame size = 0 */
  99               	/* stack size = 0 */
 100               	.L__stack_usage = 0
 101 0000 982F      		mov r25,r24
  37:graphics.c    ****     // Sanity check (bad things happen otherwise...)
  38:graphics.c    ****     if (x >= LCD_X || y >= LCD_Y) {
 102               		.loc 1 38 0
 103 0002 8435      		cpi r24,lo8(84)
 104 0004 00F4      		brsh .L8
 105               		.loc 1 38 0 is_stmt 0 discriminator 1
 106 0006 6033      		cpi r22,lo8(48)
 107 0008 00F4      		brsh .L8
 108               	.LVL9:
 109               	.LBB4:
 110               	.LBB5:
  39:graphics.c    ****         return;
  40:graphics.c    ****     }
  41:graphics.c    **** 
  42:graphics.c    ****     // Calculate the pixel 'subrow', within that LCD row
  43:graphics.c    ****     unsigned char row = y / 8;
 111               		.loc 1 43 0 is_stmt 1
 112 000a 862F      		mov r24,r22
 113               	.LVL10:
 114 000c 8695      		lsr r24
 115 000e 8695      		lsr r24
 116 0010 8695      		lsr r24
 117               	.LVL11:
  44:graphics.c    ****     unsigned char subrow = y % 8;
 118               		.loc 1 44 0
 119 0012 6770      		andi r22,lo8(7)
 120               	.LVL12:
 121 0014 24E5      		ldi r18,lo8(84)
 122 0016 829F      		mul r24,r18
 123 0018 F001      		movw r30,r0
 124 001a 1124      		clr __zero_reg__
 125 001c 892F      		mov r24,r25
 126               	.LVL13:
 127 001e 90E0      		ldi r25,0
 128               	.LVL14:
  45:graphics.c    **** 
  46:graphics.c    ****     // Set that particular pixel in our screen buffer
  47:graphics.c    ****     if (value) {
  48:graphics.c    ****         screen_buffer[row * 84 + x] |= (1 << subrow);    //Set Pixel
 129               		.loc 1 48 0
 130 0020 8E0F      		add r24,r30
 131 0022 9F1F      		adc r25,r31
 132               	.LVL15:
 133 0024 FC01      		movw r30,r24
 134 0026 E050      		subi r30,lo8(-(screen_buffer))
 135 0028 F040      		sbci r31,hi8(-(screen_buffer))
 136 002a 81E0      		ldi r24,lo8(1)
 137 002c 90E0      		ldi r25,0
 138 002e 00C0      		rjmp 2f
 139               		1:
 140 0030 880F      		lsl r24
 141               		2:
 142 0032 6A95      		dec r22
 143 0034 02F4      		brpl 1b
  47:graphics.c    ****         screen_buffer[row * 84 + x] |= (1 << subrow);    //Set Pixel
 144               		.loc 1 47 0
 145 0036 4423      		tst r20
 146 0038 01F0      		breq .L10
 147               		.loc 1 48 0
 148 003a 9081      		ld r25,Z
 149 003c 892B      		or r24,r25
 150 003e 00C0      		rjmp .L11
 151               	.L10:
  49:graphics.c    ****     } else {
  50:graphics.c    ****         screen_buffer[row * 84 + x] &= ~(1 << subrow);    //Clear Pixel
 152               		.loc 1 50 0
 153 0040 8095      		com r24
 154 0042 9081      		ld r25,Z
 155 0044 8923      		and r24,r25
 156               	.L11:
 157 0046 8083      		st Z,r24
 158               	.LVL16:
 159               	.L8:
 160 0048 0895      		ret
 161               	.LBE5:
 162               	.LBE4:
 163               		.cfi_endproc
 164               	.LFE3:
 166               	.global	__floatsisf
 167               	.global	__divsf3
 168               	.global	__gesf2
 169               	.global	__addsf3
 170               	.global	__gtsf2
 171               	.global	__ltsf2
 172               	.global	__subsf3
 173               		.section	.text.draw_line,"ax",@progbits
 174               	.global	draw_line
 176               	draw_line:
 177               	.LFB4:
  51:graphics.c    ****     }
  52:graphics.c    **** }
  53:graphics.c    **** 
  54:graphics.c    **** void draw_line(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2) {
 178               		.loc 1 54 0
 179               		.cfi_startproc
 180               	.LVL17:
 181 0000 2F92      		push r2
 182               	.LCFI2:
 183               		.cfi_def_cfa_offset 3
 184               		.cfi_offset 2, -2
 185 0002 3F92      		push r3
 186               	.LCFI3:
 187               		.cfi_def_cfa_offset 4
 188               		.cfi_offset 3, -3
 189 0004 4F92      		push r4
 190               	.LCFI4:
 191               		.cfi_def_cfa_offset 5
 192               		.cfi_offset 4, -4
 193 0006 5F92      		push r5
 194               	.LCFI5:
 195               		.cfi_def_cfa_offset 6
 196               		.cfi_offset 5, -5
 197 0008 6F92      		push r6
 198               	.LCFI6:
 199               		.cfi_def_cfa_offset 7
 200               		.cfi_offset 6, -6
 201 000a 7F92      		push r7
 202               	.LCFI7:
 203               		.cfi_def_cfa_offset 8
 204               		.cfi_offset 7, -7
 205 000c 8F92      		push r8
 206               	.LCFI8:
 207               		.cfi_def_cfa_offset 9
 208               		.cfi_offset 8, -8
 209 000e 9F92      		push r9
 210               	.LCFI9:
 211               		.cfi_def_cfa_offset 10
 212               		.cfi_offset 9, -9
 213 0010 AF92      		push r10
 214               	.LCFI10:
 215               		.cfi_def_cfa_offset 11
 216               		.cfi_offset 10, -10
 217 0012 BF92      		push r11
 218               	.LCFI11:
 219               		.cfi_def_cfa_offset 12
 220               		.cfi_offset 11, -11
 221 0014 CF92      		push r12
 222               	.LCFI12:
 223               		.cfi_def_cfa_offset 13
 224               		.cfi_offset 12, -12
 225 0016 DF92      		push r13
 226               	.LCFI13:
 227               		.cfi_def_cfa_offset 14
 228               		.cfi_offset 13, -13
 229 0018 EF92      		push r14
 230               	.LCFI14:
 231               		.cfi_def_cfa_offset 15
 232               		.cfi_offset 14, -14
 233 001a FF92      		push r15
 234               	.LCFI15:
 235               		.cfi_def_cfa_offset 16
 236               		.cfi_offset 15, -15
 237 001c 0F93      		push r16
 238               	.LCFI16:
 239               		.cfi_def_cfa_offset 17
 240               		.cfi_offset 16, -16
 241 001e 1F93      		push r17
 242               	.LCFI17:
 243               		.cfi_def_cfa_offset 18
 244               		.cfi_offset 17, -17
 245 0020 CF93      		push r28
 246               	.LCFI18:
 247               		.cfi_def_cfa_offset 19
 248               		.cfi_offset 28, -18
 249 0022 DF93      		push r29
 250               	.LCFI19:
 251               		.cfi_def_cfa_offset 20
 252               		.cfi_offset 29, -19
 253 0024 CDB7      		in r28,__SP_L__
 254 0026 DEB7      		in r29,__SP_H__
 255               	.LCFI20:
 256               		.cfi_def_cfa_register 28
 257 0028 2D97      		sbiw r28,13
 258               	.LCFI21:
 259               		.cfi_def_cfa_offset 33
 260 002a 0FB6      		in __tmp_reg__,__SREG__
 261 002c F894      		cli
 262 002e DEBF      		out __SP_H__,r29
 263 0030 0FBE      		out __SREG__,__tmp_reg__
 264 0032 CDBF      		out __SP_L__,r28
 265               	/* prologue: function */
 266               	/* frame size = 13 */
 267               	/* stack size = 31 */
 268               	.L__stack_usage = 31
 269 0034 F82E      		mov r15,r24
 270 0036 262E      		mov r2,r22
 271 0038 D42E      		mov r13,r20
 272 003a E22E      		mov r14,r18
  55:graphics.c    ****     if (x1 == x2) {
 273               		.loc 1 55 0
 274 003c 8413      		cpse r24,r20
 275 003e 00C0      		rjmp .L13
 276               	.LBB6:
  56:graphics.c    ****         // Draw vertical line
  57:graphics.c    ****         for (int i = y1; (y2 > y1) ? i <= y2 : i >= y2; (y2 > y1) ? i++ : i--) {
 277               		.loc 1 57 0
 278 0040 C62E      		mov r12,r22
 279 0042 D12C      		mov r13,__zero_reg__
 280               	.LVL18:
 281 0044 022F      		mov r16,r18
 282 0046 10E0      		ldi r17,0
 283               	.LVL19:
 284               	.L14:
 285               		.loc 1 57 0 is_stmt 0 discriminator 5
 286 0048 2E14      		cp r2,r14
 287 004a 00F4      		brsh .L15
 288               		.loc 1 57 0 discriminator 6
 289 004c 0C15      		cp r16,r12
 290 004e 1D05      		cpc r17,r13
 291 0050 04F4      		brge .+2
 292 0052 00C0      		rjmp .L12
  58:graphics.c    ****             set_pixel(x1, i, 1);
 293               		.loc 1 58 0 is_stmt 1
 294 0054 41E0      		ldi r20,lo8(1)
 295 0056 6C2D      		mov r22,r12
 296 0058 8F2D      		mov r24,r15
 297 005a 0E94 0000 		call set_pixel
 298               	.LVL20:
  57:graphics.c    ****             set_pixel(x1, i, 1);
 299               		.loc 1 57 0
 300 005e 9FEF      		ldi r25,-1
 301 0060 C91A      		sub r12,r25
 302 0062 D90A      		sbc r13,r25
 303               	.LVL21:
 304 0064 00C0      		rjmp .L14
 305               	.L15:
  57:graphics.c    ****             set_pixel(x1, i, 1);
 306               		.loc 1 57 0 is_stmt 0 discriminator 7
 307 0066 C016      		cp r12,r16
 308 0068 D106      		cpc r13,r17
 309 006a 04F4      		brge .+2
 310 006c 00C0      		rjmp .L12
 311               		.loc 1 58 0 is_stmt 1
 312 006e 41E0      		ldi r20,lo8(1)
 313 0070 6C2D      		mov r22,r12
 314 0072 8F2D      		mov r24,r15
 315 0074 0E94 0000 		call set_pixel
 316               	.LVL22:
  57:graphics.c    ****             set_pixel(x1, i, 1);
 317               		.loc 1 57 0
 318 0078 E1E0      		ldi r30,1
 319 007a CE1A      		sub r12,r30
 320 007c D108      		sbc r13,__zero_reg__
 321               	.LVL23:
 322 007e 00C0      		rjmp .L14
 323               	.LVL24:
 324               	.L13:
 325 0080 082F      		mov r16,r24
 326 0082 10E0      		ldi r17,0
 327 0084 242F      		mov r18,r20
 328 0086 30E0      		ldi r19,0
 329 0088 3D87      		std Y+13,r19
 330 008a 2C87      		std Y+12,r18
 331               	.LBE6:
  59:graphics.c    ****         }
  60:graphics.c    ****     } else if (y1 == y2) {
 332               		.loc 1 60 0
 333 008c 6E11      		cpse r22,r14
 334 008e 00C0      		rjmp .L19
 335               	.L20:
 336               	.LVL25:
 337               	.LBB7:
  61:graphics.c    ****         // Draw horizontal line
  62:graphics.c    ****         for (int i = x1; (x2 > x1) ? i <= x2 : i >= x2; (x2 > x1) ? i++ : i--) {
 338               		.loc 1 62 0 discriminator 5
 339 0090 FD14      		cp r15,r13
 340 0092 00F4      		brsh .L21
 341               		.loc 1 62 0 is_stmt 0 discriminator 6
 342 0094 8C85      		ldd r24,Y+12
 343 0096 9D85      		ldd r25,Y+13
 344 0098 8017      		cp r24,r16
 345 009a 9107      		cpc r25,r17
 346 009c 04F4      		brge .+2
 347 009e 00C0      		rjmp .L12
  63:graphics.c    ****             set_pixel(i, y1, 1);
 348               		.loc 1 63 0 is_stmt 1
 349 00a0 41E0      		ldi r20,lo8(1)
 350 00a2 622D      		mov r22,r2
 351 00a4 802F      		mov r24,r16
 352 00a6 0E94 0000 		call set_pixel
 353               	.LVL26:
  62:graphics.c    ****             set_pixel(i, y1, 1);
 354               		.loc 1 62 0
 355 00aa 0F5F      		subi r16,-1
 356 00ac 1F4F      		sbci r17,-1
 357               	.LVL27:
 358 00ae 00C0      		rjmp .L20
 359               	.L21:
  62:graphics.c    ****             set_pixel(i, y1, 1);
 360               		.loc 1 62 0 is_stmt 0 discriminator 7
 361 00b0 EC85      		ldd r30,Y+12
 362 00b2 FD85      		ldd r31,Y+13
 363 00b4 0E17      		cp r16,r30
 364 00b6 1F07      		cpc r17,r31
 365 00b8 04F4      		brge .+2
 366 00ba 00C0      		rjmp .L12
 367               		.loc 1 63 0 is_stmt 1
 368 00bc 41E0      		ldi r20,lo8(1)
 369 00be 622D      		mov r22,r2
 370 00c0 802F      		mov r24,r16
 371 00c2 0E94 0000 		call set_pixel
 372               	.LVL28:
  62:graphics.c    ****             set_pixel(i, y1, 1);
 373               		.loc 1 62 0
 374 00c6 0150      		subi r16,1
 375 00c8 1109      		sbc r17,__zero_reg__
 376               	.LVL29:
 377 00ca 00C0      		rjmp .L20
 378               	.LVL30:
 379               	.L19:
 380               	.LBE7:
 381               	.LBB8:
  64:graphics.c    ****         }
  65:graphics.c    ****     } else {
  66:graphics.c    ****         // Get Bresenhaming...
  67:graphics.c    ****         float dx = x2 - x1;
 382               		.loc 1 67 0
 383 00cc 6C85      		ldd r22,Y+12
 384 00ce 7D85      		ldd r23,Y+13
 385 00d0 601B      		sub r22,r16
 386 00d2 710B      		sbc r23,r17
 387 00d4 8827      		clr r24
 388 00d6 77FD      		sbrc r23,7
 389 00d8 8095      		com r24
 390 00da 982F      		mov r25,r24
 391 00dc 0E94 0000 		call __floatsisf
 392               	.LVL31:
 393 00e0 2B01      		movw r4,r22
 394 00e2 3C01      		movw r6,r24
 395               	.LVL32:
  68:graphics.c    ****         float dy = y2 - y1;
 396               		.loc 1 68 0
 397 00e4 2E2D      		mov r18,r14
 398 00e6 30E0      		ldi r19,0
 399 00e8 3E83      		std Y+6,r19
 400 00ea 2D83      		std Y+5,r18
 401 00ec 312C      		mov r3,__zero_reg__
 402 00ee B901      		movw r22,r18
 403 00f0 6219      		sub r22,r2
 404 00f2 7309      		sbc r23,r3
 405 00f4 8827      		clr r24
 406 00f6 77FD      		sbrc r23,7
 407 00f8 8095      		com r24
 408 00fa 982F      		mov r25,r24
 409 00fc 0E94 0000 		call __floatsisf
 410               	.LVL33:
 411 0100 4B01      		movw r8,r22
 412 0102 5C01      		movw r10,r24
 413               	.LVL34:
  69:graphics.c    ****         float err = 0.0;
  70:graphics.c    ****         float derr = ABS(dy / dx);
 414               		.loc 1 70 0
 415 0104 A301      		movw r20,r6
 416 0106 9201      		movw r18,r4
 417 0108 0E94 0000 		call __divsf3
 418               	.LVL35:
 419 010c 6983      		std Y+1,r22
 420 010e 7A83      		std Y+2,r23
 421 0110 8B83      		std Y+3,r24
 422 0112 9C83      		std Y+4,r25
 423 0114 20E0      		ldi r18,0
 424 0116 30E0      		ldi r19,0
 425 0118 A901      		movw r20,r18
 426 011a 0E94 0000 		call __gesf2
 427               	.LVL36:
 428 011e 87FF      		sbrs r24,7
 429 0120 00C0      		rjmp .L24
 430               		.loc 1 70 0 is_stmt 0 discriminator 2
 431 0122 A301      		movw r20,r6
 432 0124 9201      		movw r18,r4
 433 0126 C501      		movw r24,r10
 434 0128 B401      		movw r22,r8
 435 012a 9058      		subi r25,0x80
 436 012c 0E94 0000 		call __divsf3
 437               	.LVL37:
 438 0130 6983      		std Y+1,r22
 439 0132 7A83      		std Y+2,r23
 440 0134 8B83      		std Y+3,r24
 441 0136 9C83      		std Y+4,r25
 442               	.L24:
 443               	.LVL38:
  69:graphics.c    ****         float err = 0.0;
 444               		.loc 1 69 0 is_stmt 1 discriminator 4
 445 0138 C12C      		mov r12,__zero_reg__
 446 013a D12C      		mov r13,__zero_reg__
 447 013c 7601      		movw r14,r12
 448               	.LVL39:
 449               	.L25:
 450               	.LBB9:
  71:graphics.c    **** 
  72:graphics.c    ****         for (int x = x1, y = y1; (dx > 0) ? x <= x2 : x >= x2; (dx > 0) ? x++ : x--) {
 451               		.loc 1 72 0 discriminator 5
 452 013e 20E0      		ldi r18,0
 453 0140 30E0      		ldi r19,0
 454 0142 A901      		movw r20,r18
 455 0144 C301      		movw r24,r6
 456 0146 B201      		movw r22,r4
 457 0148 0E94 0000 		call __gtsf2
 458               	.LVL40:
 459 014c 1816      		cp __zero_reg__,r24
 460 014e 04F0      		brlt .+2
 461 0150 00C0      		rjmp .L49
 462               		.loc 1 72 0 is_stmt 0 discriminator 6
 463 0152 2C85      		ldd r18,Y+12
 464 0154 3D85      		ldd r19,Y+13
 465 0156 2017      		cp r18,r16
 466 0158 3107      		cpc r19,r17
 467 015a 04F4      		brge .+2
 468 015c 00C0      		rjmp .L12
 469               	.L42:
  73:graphics.c    ****             set_pixel(x, y, 1);
 470               		.loc 1 73 0 is_stmt 1
 471 015e 0B87      		std Y+11,r16
 472 0160 41E0      		ldi r20,lo8(1)
 473 0162 622D      		mov r22,r2
 474 0164 802F      		mov r24,r16
 475 0166 0E94 0000 		call set_pixel
 476               	.LVL41:
  74:graphics.c    ****             err += derr;
 477               		.loc 1 74 0
 478 016a 2981      		ldd r18,Y+1
 479 016c 3A81      		ldd r19,Y+2
 480 016e 4B81      		ldd r20,Y+3
 481 0170 5C81      		ldd r21,Y+4
 482 0172 C701      		movw r24,r14
 483 0174 B601      		movw r22,r12
 484 0176 0E94 0000 		call __addsf3
 485               	.LVL42:
 486               	.L50:
  75:graphics.c    ****             while (err >= 0.5 && ((dy > 0) ? y <= y2 : y >= y2)) {
  76:graphics.c    ****                 set_pixel(x, y, 1);
  77:graphics.c    ****                 y += (dy > 0) - (dy < 0);
  78:graphics.c    ****                 err -= 1.0;
 487               		.loc 1 78 0
 488 017a 6B01      		movw r12,r22
 489 017c 7C01      		movw r14,r24
 490               	.LVL43:
  75:graphics.c    ****             while (err >= 0.5 && ((dy > 0) ? y <= y2 : y >= y2)) {
 491               		.loc 1 75 0
 492 017e 20E0      		ldi r18,0
 493 0180 30E0      		ldi r19,0
 494 0182 40E0      		ldi r20,0
 495 0184 5FE3      		ldi r21,lo8(63)
 496 0186 0E94 0000 		call __gesf2
 497               	.LVL44:
 498 018a 87FF      		sbrs r24,7
 499 018c 00C0      		rjmp .L29
 500               	.L35:
  72:graphics.c    ****             set_pixel(x, y, 1);
 501               		.loc 1 72 0
 502 018e 20E0      		ldi r18,0
 503 0190 30E0      		ldi r19,0
 504 0192 A901      		movw r20,r18
 505 0194 C301      		movw r24,r6
 506 0196 B201      		movw r22,r4
 507 0198 0E94 0000 		call __gtsf2
 508               	.LVL45:
 509 019c 1816      		cp __zero_reg__,r24
 510 019e 04F0      		brlt .+2
 511 01a0 00C0      		rjmp .L51
  72:graphics.c    ****             set_pixel(x, y, 1);
 512               		.loc 1 72 0 is_stmt 0 discriminator 2
 513 01a2 0F5F      		subi r16,-1
 514 01a4 1F4F      		sbci r17,-1
 515               	.LVL46:
 516 01a6 00C0      		rjmp .L25
 517               	.L29:
  75:graphics.c    ****             while (err >= 0.5 && ((dy > 0) ? y <= y2 : y >= y2)) {
 518               		.loc 1 75 0 is_stmt 1 discriminator 1
 519 01a8 20E0      		ldi r18,0
 520 01aa 30E0      		ldi r19,0
 521 01ac A901      		movw r20,r18
 522 01ae C501      		movw r24,r10
 523 01b0 B401      		movw r22,r8
 524 01b2 0E94 0000 		call __gtsf2
 525               	.LVL47:
 526 01b6 1816      		cp __zero_reg__,r24
 527 01b8 04F4      		brge .L48
  75:graphics.c    ****             while (err >= 0.5 && ((dy > 0) ? y <= y2 : y >= y2)) {
 528               		.loc 1 75 0 is_stmt 0 discriminator 2
 529 01ba 8D81      		ldd r24,Y+5
 530 01bc 9E81      		ldd r25,Y+6
 531 01be 8215      		cp r24,r2
 532 01c0 9305      		cpc r25,r3
 533 01c2 04F0      		brlt .L35
 534               	.L34:
  76:graphics.c    ****                 y += (dy > 0) - (dy < 0);
 535               		.loc 1 76 0 is_stmt 1
 536 01c4 41E0      		ldi r20,lo8(1)
 537 01c6 622D      		mov r22,r2
 538 01c8 8B85      		ldd r24,Y+11
 539 01ca 0E94 0000 		call set_pixel
 540               	.LVL48:
  77:graphics.c    ****                 err -= 1.0;
 541               		.loc 1 77 0
 542 01ce 81E0      		ldi r24,lo8(1)
 543 01d0 90E0      		ldi r25,0
 544 01d2 9887      		std Y+8,r25
 545 01d4 8F83      		std Y+7,r24
 546 01d6 20E0      		ldi r18,0
 547 01d8 30E0      		ldi r19,0
 548 01da A901      		movw r20,r18
 549 01dc C501      		movw r24,r10
 550 01de B401      		movw r22,r8
 551 01e0 0E94 0000 		call __gtsf2
 552               	.LVL49:
 553 01e4 1816      		cp __zero_reg__,r24
 554 01e6 04F0      		brlt .L27
 555 01e8 1886      		std Y+8,__zero_reg__
 556 01ea 1F82      		std Y+7,__zero_reg__
 557               	.L27:
 558 01ec E1E0      		ldi r30,lo8(1)
 559 01ee F0E0      		ldi r31,0
 560 01f0 FA87      		std Y+10,r31
 561 01f2 E987      		std Y+9,r30
 562 01f4 20E0      		ldi r18,0
 563 01f6 30E0      		ldi r19,0
 564 01f8 A901      		movw r20,r18
 565 01fa C501      		movw r24,r10
 566 01fc B401      		movw r22,r8
 567 01fe 0E94 0000 		call __ltsf2
 568               	.LVL50:
 569 0202 87FD      		sbrc r24,7
 570 0204 00C0      		rjmp .L28
 571 0206 1A86      		std Y+10,__zero_reg__
 572 0208 1986      		std Y+9,__zero_reg__
 573               	.L28:
 574 020a 8F81      		ldd r24,Y+7
 575 020c 9885      		ldd r25,Y+8
 576 020e 2985      		ldd r18,Y+9
 577 0210 3A85      		ldd r19,Y+10
 578 0212 821B      		sub r24,r18
 579 0214 930B      		sbc r25,r19
 580 0216 280E      		add r2,r24
 581 0218 391E      		adc r3,r25
 582               	.LVL51:
 583               		.loc 1 78 0
 584 021a 20E0      		ldi r18,0
 585 021c 30E0      		ldi r19,0
 586 021e 40E8      		ldi r20,lo8(-128)
 587 0220 5FE3      		ldi r21,lo8(63)
 588 0222 C701      		movw r24,r14
 589 0224 B601      		movw r22,r12
 590 0226 0E94 0000 		call __subsf3
 591               	.LVL52:
 592 022a 00C0      		rjmp .L50
 593               	.L48:
  75:graphics.c    ****                 set_pixel(x, y, 1);
 594               		.loc 1 75 0 discriminator 3
 595 022c ED81      		ldd r30,Y+5
 596 022e FE81      		ldd r31,Y+6
 597 0230 2E16      		cp r2,r30
 598 0232 3F06      		cpc r3,r31
 599 0234 04F4      		brge .L34
 600 0236 00C0      		rjmp .L35
 601               	.L51:
  72:graphics.c    ****             set_pixel(x, y, 1);
 602               		.loc 1 72 0 discriminator 3
 603 0238 0150      		subi r16,1
 604 023a 1109      		sbc r17,__zero_reg__
 605               	.LVL53:
 606 023c 00C0      		rjmp .L25
 607               	.L49:
  72:graphics.c    ****             set_pixel(x, y, 1);
 608               		.loc 1 72 0 is_stmt 0 discriminator 7
 609 023e 8C85      		ldd r24,Y+12
 610 0240 9D85      		ldd r25,Y+13
 611 0242 0817      		cp r16,r24
 612 0244 1907      		cpc r17,r25
 613 0246 04F0      		brlt .+2
 614 0248 00C0      		rjmp .L42
 615               	.LVL54:
 616               	.L12:
 617               	/* epilogue start */
 618               	.LBE9:
 619               	.LBE8:
  79:graphics.c    ****             }
  80:graphics.c    ****         }
  81:graphics.c    ****     }
  82:graphics.c    **** }
 620               		.loc 1 82 0 is_stmt 1
 621 024a 2D96      		adiw r28,13
 622 024c 0FB6      		in __tmp_reg__,__SREG__
 623 024e F894      		cli
 624 0250 DEBF      		out __SP_H__,r29
 625 0252 0FBE      		out __SREG__,__tmp_reg__
 626 0254 CDBF      		out __SP_L__,r28
 627 0256 DF91      		pop r29
 628 0258 CF91      		pop r28
 629 025a 1F91      		pop r17
 630 025c 0F91      		pop r16
 631 025e FF90      		pop r15
 632               	.LVL55:
 633 0260 EF90      		pop r14
 634               	.LVL56:
 635 0262 DF90      		pop r13
 636 0264 CF90      		pop r12
 637 0266 BF90      		pop r11
 638 0268 AF90      		pop r10
 639 026a 9F90      		pop r9
 640 026c 8F90      		pop r8
 641 026e 7F90      		pop r7
 642 0270 6F90      		pop r6
 643 0272 5F90      		pop r5
 644 0274 4F90      		pop r4
 645 0276 3F90      		pop r3
 646 0278 2F90      		pop r2
 647 027a 0895      		ret
 648               		.cfi_endproc
 649               	.LFE4:
 651               		.section	.text.draw_char,"ax",@progbits
 652               	.global	draw_char
 654               	draw_char:
 655               	.LFB5:
  83:graphics.c    **** 
  84:graphics.c    **** void draw_char(unsigned char top_left_x, unsigned char top_left_y, char character) {
 656               		.loc 1 84 0
 657               		.cfi_startproc
 658               	.LVL57:
 659 0000 7F92      		push r7
 660               	.LCFI22:
 661               		.cfi_def_cfa_offset 3
 662               		.cfi_offset 7, -2
 663 0002 8F92      		push r8
 664               	.LCFI23:
 665               		.cfi_def_cfa_offset 4
 666               		.cfi_offset 8, -3
 667 0004 9F92      		push r9
 668               	.LCFI24:
 669               		.cfi_def_cfa_offset 5
 670               		.cfi_offset 9, -4
 671 0006 AF92      		push r10
 672               	.LCFI25:
 673               		.cfi_def_cfa_offset 6
 674               		.cfi_offset 10, -5
 675 0008 BF92      		push r11
 676               	.LCFI26:
 677               		.cfi_def_cfa_offset 7
 678               		.cfi_offset 11, -6
 679 000a CF92      		push r12
 680               	.LCFI27:
 681               		.cfi_def_cfa_offset 8
 682               		.cfi_offset 12, -7
 683 000c DF92      		push r13
 684               	.LCFI28:
 685               		.cfi_def_cfa_offset 9
 686               		.cfi_offset 13, -8
 687 000e EF92      		push r14
 688               	.LCFI29:
 689               		.cfi_def_cfa_offset 10
 690               		.cfi_offset 14, -9
 691 0010 FF92      		push r15
 692               	.LCFI30:
 693               		.cfi_def_cfa_offset 11
 694               		.cfi_offset 15, -10
 695 0012 0F93      		push r16
 696               	.LCFI31:
 697               		.cfi_def_cfa_offset 12
 698               		.cfi_offset 16, -11
 699 0014 1F93      		push r17
 700               	.LCFI32:
 701               		.cfi_def_cfa_offset 13
 702               		.cfi_offset 17, -12
 703 0016 CF93      		push r28
 704               	.LCFI33:
 705               		.cfi_def_cfa_offset 14
 706               		.cfi_offset 28, -13
 707 0018 DF93      		push r29
 708               	.LCFI34:
 709               		.cfi_def_cfa_offset 15
 710               		.cfi_offset 29, -14
 711               	/* prologue: function */
 712               	/* frame size = 0 */
 713               	/* stack size = 13 */
 714               	.L__stack_usage = 13
 715 001a 982E      		mov r9,r24
 716 001c 862E      		mov r8,r22
 717               	.LVL58:
 718 001e 25E0      		ldi r18,lo8(5)
 719 0020 429F      		mul r20,r18
 720 0022 7001      		movw r14,r0
 721 0024 1124      		clr __zero_reg__
 722               		.loc 1 84 0
 723 0026 00E0      		ldi r16,0
 724 0028 10E0      		ldi r17,0
 725 002a 30EA      		ldi r19,-96
 726 002c E31A      		sub r14,r19
 727 002e F108      		sbc r15,__zero_reg__
 728               	.LBB10:
 729               	.LBB11:
  85:graphics.c    ****     int char_width = 5;
  86:graphics.c    ****     int char_height = 8;
  87:graphics.c    **** 
  88:graphics.c    ****     // loop through each pixel in the character array and plot each one individually
  89:graphics.c    ****     for (unsigned char i = 0; i < char_width; i++) {
  90:graphics.c    ****         for (unsigned char j = 0; j < char_height; j++) {
  91:graphics.c    ****             set_pixel(top_left_x + i, top_left_y + j, (pgm_read_byte(&(ASCII[character - 0x20][i]))
 730               		.loc 1 91 0
 731 0030 AA24      		clr r10
 732 0032 A394      		inc r10
 733 0034 B12C      		mov r11,__zero_reg__
 734               	.LVL59:
 735               	.L53:
 736 0036 C701      		movw r24,r14
 737 0038 800F      		add r24,r16
 738 003a 911F      		adc r25,r17
 739 003c 9C01      		movw r18,r24
 740 003e 2050      		subi r18,lo8(-(ASCII))
 741 0040 3040      		sbci r19,hi8(-(ASCII))
 742 0042 6901      		movw r12,r18
 743               	.LBE11:
 744               	.LBE10:
  84:graphics.c    ****     int char_width = 5;
 745               		.loc 1 84 0
 746 0044 C0E0      		ldi r28,0
 747 0046 D0E0      		ldi r29,0
 748 0048 792C      		mov r7,r9
 749 004a 700E      		add r7,r16
 750               	.L56:
 751               	.LVL60:
 752               	.LBB14:
 753               	.LBB13:
  90:graphics.c    ****             set_pixel(top_left_x + i, top_left_y + j, (pgm_read_byte(&(ASCII[character - 0x20][i]))
 754               		.loc 1 90 0 discriminator 1
 755 004c C830      		cpi r28,8
 756 004e D105      		cpc r29,__zero_reg__
 757 0050 01F0      		breq .L57
 758               	.LVL61:
 759               	.LBB12:
 760               		.loc 1 91 0 discriminator 3
 761 0052 F601      		movw r30,r12
 762               	/* #APP */
 763               	 ;  91 "graphics.c" 1
 764 0054 4491      		lpm r20, Z
 765               		
 766               	 ;  0 "" 2
 767               	.LVL62:
 768               	/* #NOAPP */
 769               	.LBE12:
 770 0056 50E0      		ldi r21,0
 771 0058 9501      		movw r18,r10
 772 005a 0C2E      		mov r0,r28
 773 005c 00C0      		rjmp 2f
 774               		1:
 775 005e 220F      		lsl r18
 776 0060 331F      		rol r19
 777               		2:
 778 0062 0A94      		dec r0
 779 0064 02F4      		brpl 1b
 780 0066 4223      		and r20,r18
 781 0068 5323      		and r21,r19
 782               	.LVL63:
 783 006a 0C2E      		mov r0,r28
 784 006c 00C0      		rjmp 2f
 785               		1:
 786 006e 5595      		asr r21
 787 0070 4795      		ror r20
 788               		2:
 789 0072 0A94      		dec r0
 790 0074 02F4      		brpl 1b
 791 0076 6C2F      		mov r22,r28
 792 0078 680D      		add r22,r8
 793 007a 872D      		mov r24,r7
 794 007c 0E94 0000 		call set_pixel
 795               	.LVL64:
 796 0080 2196      		adiw r28,1
 797               	.LVL65:
 798 0082 00C0      		rjmp .L56
 799               	.LVL66:
 800               	.L57:
 801 0084 0F5F      		subi r16,-1
 802 0086 1F4F      		sbci r17,-1
 803               	.LVL67:
 804               	.LBE13:
  89:graphics.c    ****         for (unsigned char j = 0; j < char_height; j++) {
 805               		.loc 1 89 0 discriminator 2
 806 0088 0530      		cpi r16,5
 807 008a 1105      		cpc r17,__zero_reg__
 808 008c 01F4      		brne .L53
 809               	/* epilogue start */
 810               	.LBE14:
  92:graphics.c    ****         }
  93:graphics.c    ****     }
  94:graphics.c    **** }
 811               		.loc 1 94 0
 812 008e DF91      		pop r29
 813 0090 CF91      		pop r28
 814               	.LVL68:
 815 0092 1F91      		pop r17
 816 0094 0F91      		pop r16
 817               	.LVL69:
 818 0096 FF90      		pop r15
 819 0098 EF90      		pop r14
 820 009a DF90      		pop r13
 821 009c CF90      		pop r12
 822 009e BF90      		pop r11
 823 00a0 AF90      		pop r10
 824 00a2 9F90      		pop r9
 825               	.LVL70:
 826 00a4 8F90      		pop r8
 827               	.LVL71:
 828 00a6 7F90      		pop r7
 829 00a8 0895      		ret
 830               		.cfi_endproc
 831               	.LFE5:
 833               		.section	.text.draw_int,"ax",@progbits
 834               	.global	draw_int
 836               	draw_int:
 837               	.LFB6:
  95:graphics.c    **** 
  96:graphics.c    **** void draw_int(unsigned char top_left_x, unsigned char top_left_y, int integer) {
 838               		.loc 1 96 0
 839               		.cfi_startproc
 840               	.LVL72:
 841 0000 5F92      		push r5
 842               	.LCFI35:
 843               		.cfi_def_cfa_offset 3
 844               		.cfi_offset 5, -2
 845 0002 6F92      		push r6
 846               	.LCFI36:
 847               		.cfi_def_cfa_offset 4
 848               		.cfi_offset 6, -3
 849 0004 7F92      		push r7
 850               	.LCFI37:
 851               		.cfi_def_cfa_offset 5
 852               		.cfi_offset 7, -4
 853 0006 8F92      		push r8
 854               	.LCFI38:
 855               		.cfi_def_cfa_offset 6
 856               		.cfi_offset 8, -5
 857 0008 9F92      		push r9
 858               	.LCFI39:
 859               		.cfi_def_cfa_offset 7
 860               		.cfi_offset 9, -6
 861 000a AF92      		push r10
 862               	.LCFI40:
 863               		.cfi_def_cfa_offset 8
 864               		.cfi_offset 10, -7
 865 000c BF92      		push r11
 866               	.LCFI41:
 867               		.cfi_def_cfa_offset 9
 868               		.cfi_offset 11, -8
 869 000e CF92      		push r12
 870               	.LCFI42:
 871               		.cfi_def_cfa_offset 10
 872               		.cfi_offset 12, -9
 873 0010 DF92      		push r13
 874               	.LCFI43:
 875               		.cfi_def_cfa_offset 11
 876               		.cfi_offset 13, -10
 877 0012 EF92      		push r14
 878               	.LCFI44:
 879               		.cfi_def_cfa_offset 12
 880               		.cfi_offset 14, -11
 881 0014 FF92      		push r15
 882               	.LCFI45:
 883               		.cfi_def_cfa_offset 13
 884               		.cfi_offset 15, -12
 885 0016 0F93      		push r16
 886               	.LCFI46:
 887               		.cfi_def_cfa_offset 14
 888               		.cfi_offset 16, -13
 889 0018 1F93      		push r17
 890               	.LCFI47:
 891               		.cfi_def_cfa_offset 15
 892               		.cfi_offset 17, -14
 893 001a CF93      		push r28
 894               	.LCFI48:
 895               		.cfi_def_cfa_offset 16
 896               		.cfi_offset 28, -15
 897 001c DF93      		push r29
 898               	.LCFI49:
 899               		.cfi_def_cfa_offset 17
 900               		.cfi_offset 29, -16
 901               	/* prologue: function */
 902               	/* frame size = 0 */
 903               	/* stack size = 15 */
 904               	.L__stack_usage = 15
 905 001e F82E      		mov r15,r24
 906 0020 E62E      		mov r14,r22
 907 0022 CA01      		movw r24,r20
 908               	.LVL73:
  97:graphics.c    ****     int char_width = 5;
  98:graphics.c    ****     int char_height = 8;
  99:graphics.c    **** 
 100:graphics.c    ****     if (integer > 9) {
 909               		.loc 1 100 0
 910 0024 4A30      		cpi r20,10
 911 0026 5105      		cpc r21,__zero_reg__
 912 0028 04F4      		brge .L59
 913 002a 25E0      		ldi r18,lo8(5)
 914 002c 249F      		mul r18,r20
 915 002e 5001      		movw r10,r0
 916 0030 259F      		mul r18,r21
 917 0032 B00C      		add r11,r0
 918 0034 1124      		clr __zero_reg__
 919               	.LVL74:
 920 0036 00E0      		ldi r16,0
 921 0038 10E0      		ldi r17,0
 922 003a 20E5      		ldi r18,80
 923 003c A20E      		add r10,r18
 924 003e B11C      		adc r11,__zero_reg__
 925               	.LBB15:
 926               	.LBB16:
 101:graphics.c    ****         int ones_place = integer % 10;
 102:graphics.c    ****         int tens_place = (int) integer / 10;
 103:graphics.c    ****         for (unsigned char i = 0; i < char_width + char_width; i++) {
 104:graphics.c    ****             for (unsigned char j = 0; j < char_height; j++) {
 105:graphics.c    ****                 set_pixel(top_left_x + i, top_left_y + j,
 106:graphics.c    ****                           (pgm_read_byte(&(ASCII[ones_place + 15][i])) & (1 << j)) >> j);
 107:graphics.c    ****             }
 108:graphics.c    ****         }
 109:graphics.c    ****         for (unsigned char i = 0; i < char_width; i++) {
 110:graphics.c    ****             for (unsigned char j = 0; j < char_height; j++) {
 111:graphics.c    ****                 set_pixel(top_left_x + i, top_left_y + j,
 112:graphics.c    ****                           (pgm_read_byte(&(ASCII[tens_place + 16][i])) & (1 << j)) >> j);
 113:graphics.c    ****             }
 114:graphics.c    ****         }
 115:graphics.c    **** 
 116:graphics.c    ****     } else {
 117:graphics.c    ****         for (unsigned char i = 0; i < char_width + char_width; i++) {
 118:graphics.c    ****             for (unsigned char j = 0; j < char_height; j++) {
 119:graphics.c    ****                 set_pixel(top_left_x + i, top_left_y + j,
 120:graphics.c    ****                           (pgm_read_byte(&(ASCII[integer + 16][i])) & (1 << j)) >> j);
 927               		.loc 1 120 0
 928 0040 8824      		clr r8
 929 0042 8394      		inc r8
 930 0044 912C      		mov r9,__zero_reg__
 931 0046 00C0      		rjmp .L60
 932               	.LVL75:
 933               	.L59:
 934               	.LBE16:
 935               	.LBE15:
 936               	.LBB19:
 102:graphics.c    ****         for (unsigned char i = 0; i < char_width + char_width; i++) {
 937               		.loc 1 102 0
 938 0048 6AE0      		ldi r22,lo8(10)
 939 004a 70E0      		ldi r23,0
 940               	.LVL76:
 941 004c 0E94 0000 		call __divmodhi4
 942               	.LVL77:
 943 0050 4B01      		movw r8,r22
 944               	.LVL78:
 945 0052 25E0      		ldi r18,lo8(5)
 946 0054 289F      		mul r18,r24
 947 0056 5001      		movw r10,r0
 948 0058 299F      		mul r18,r25
 949 005a B00C      		add r11,r0
 950 005c 1124      		clr __zero_reg__
 951 005e 00E0      		ldi r16,0
 952 0060 10E0      		ldi r17,0
 953 0062 3BE4      		ldi r19,75
 954 0064 A30E      		add r10,r19
 955 0066 B11C      		adc r11,__zero_reg__
 956               	.LBB20:
 957               	.LBB21:
 106:graphics.c    ****             }
 958               		.loc 1 106 0
 959 0068 6624      		clr r6
 960 006a 6394      		inc r6
 961 006c 712C      		mov r7,__zero_reg__
 962               	.LVL79:
 963               	.L61:
 964 006e C501      		movw r24,r10
 965 0070 800F      		add r24,r16
 966 0072 911F      		adc r25,r17
 967 0074 FC01      		movw r30,r24
 968 0076 E050      		subi r30,lo8(-(ASCII))
 969 0078 F040      		sbci r31,hi8(-(ASCII))
 970 007a 6F01      		movw r12,r30
 971               	.LBE21:
 972               	.LBE20:
 973               	.LBE19:
  96:graphics.c    ****     int char_width = 5;
 974               		.loc 1 96 0
 975 007c C0E0      		ldi r28,0
 976 007e D0E0      		ldi r29,0
 977 0080 5F2C      		mov r5,r15
 978 0082 500E      		add r5,r16
 979               	.L64:
 980               	.LVL80:
 981               	.LBB31:
 982               	.LBB24:
 983               	.LBB23:
 104:graphics.c    ****                 set_pixel(top_left_x + i, top_left_y + j,
 984               		.loc 1 104 0 discriminator 1
 985 0084 C830      		cpi r28,8
 986 0086 D105      		cpc r29,__zero_reg__
 987 0088 01F0      		breq .L75
 988               	.LVL81:
 989               	.LBB22:
 106:graphics.c    ****             }
 990               		.loc 1 106 0 discriminator 3
 991 008a F601      		movw r30,r12
 992               	/* #APP */
 993               	 ;  106 "graphics.c" 1
 994 008c 4491      		lpm r20, Z
 995               		
 996               	 ;  0 "" 2
 997               	.LVL82:
 998               	/* #NOAPP */
 999               	.LBE22:
 1000 008e 50E0      		ldi r21,0
 1001 0090 9301      		movw r18,r6
 1002 0092 0C2E      		mov r0,r28
 1003 0094 00C0      		rjmp 2f
 1004               		1:
 1005 0096 220F      		lsl r18
 1006 0098 331F      		rol r19
 1007               		2:
 1008 009a 0A94      		dec r0
 1009 009c 02F4      		brpl 1b
 1010 009e 4223      		and r20,r18
 1011 00a0 5323      		and r21,r19
 1012               	.LVL83:
 1013 00a2 0C2E      		mov r0,r28
 1014 00a4 00C0      		rjmp 2f
 1015               		1:
 1016 00a6 5595      		asr r21
 1017 00a8 4795      		ror r20
 1018               		2:
 1019 00aa 0A94      		dec r0
 1020 00ac 02F4      		brpl 1b
 1021 00ae 6C2F      		mov r22,r28
 1022 00b0 6E0D      		add r22,r14
 105:graphics.c    ****                           (pgm_read_byte(&(ASCII[ones_place + 15][i])) & (1 << j)) >> j);
 1023               		.loc 1 105 0 discriminator 3
 1024 00b2 852D      		mov r24,r5
 1025 00b4 0E94 0000 		call set_pixel
 1026               	.LVL84:
 1027 00b8 2196      		adiw r28,1
 1028               	.LVL85:
 1029 00ba 00C0      		rjmp .L64
 1030               	.LVL86:
 1031               	.L75:
 1032 00bc 0F5F      		subi r16,-1
 1033 00be 1F4F      		sbci r17,-1
 1034               	.LVL87:
 1035               	.LBE23:
 103:graphics.c    ****             for (unsigned char j = 0; j < char_height; j++) {
 1036               		.loc 1 103 0 discriminator 2
 1037 00c0 0A30      		cpi r16,10
 1038 00c2 1105      		cpc r17,__zero_reg__
 1039 00c4 01F4      		brne .L61
 1040 00c6 85E0      		ldi r24,lo8(5)
 1041 00c8 889D      		mul r24,r8
 1042 00ca 5001      		movw r10,r0
 1043 00cc 899D      		mul r24,r9
 1044 00ce B00C      		add r11,r0
 1045 00d0 1124      		clr __zero_reg__
 1046               	.LVL88:
 103:graphics.c    ****             for (unsigned char j = 0; j < char_height; j++) {
 1047               		.loc 1 103 0 is_stmt 0
 1048 00d2 00E0      		ldi r16,0
 1049 00d4 10E0      		ldi r17,0
 1050               	.LVL89:
 1051 00d6 20E5      		ldi r18,80
 1052 00d8 A20E      		add r10,r18
 1053 00da B11C      		adc r11,__zero_reg__
 1054               	.LBE24:
 1055               	.LBB25:
 1056               	.LBB26:
 112:graphics.c    ****             }
 1057               		.loc 1 112 0 is_stmt 1
 1058 00dc 8824      		clr r8
 1059 00de 8394      		inc r8
 1060 00e0 912C      		mov r9,__zero_reg__
 1061               	.LVL90:
 1062               	.L63:
 1063 00e2 C501      		movw r24,r10
 1064 00e4 800F      		add r24,r16
 1065 00e6 911F      		adc r25,r17
 1066 00e8 9C01      		movw r18,r24
 1067 00ea 2050      		subi r18,lo8(-(ASCII))
 1068 00ec 3040      		sbci r19,hi8(-(ASCII))
 1069 00ee 6901      		movw r12,r18
 1070               	.LBE26:
 1071               	.LBE25:
 102:graphics.c    ****         for (unsigned char i = 0; i < char_width + char_width; i++) {
 1072               		.loc 1 102 0
 1073 00f0 C0E0      		ldi r28,0
 1074 00f2 D0E0      		ldi r29,0
 1075 00f4 7F2C      		mov r7,r15
 1076 00f6 700E      		add r7,r16
 1077               	.L66:
 1078               	.LVL91:
 1079               	.LBB29:
 1080               	.LBB28:
 110:graphics.c    ****                 set_pixel(top_left_x + i, top_left_y + j,
 1081               		.loc 1 110 0 discriminator 1
 1082 00f8 C830      		cpi r28,8
 1083 00fa D105      		cpc r29,__zero_reg__
 1084 00fc 01F0      		breq .L76
 1085               	.LVL92:
 1086               	.LBB27:
 112:graphics.c    ****             }
 1087               		.loc 1 112 0 discriminator 3
 1088 00fe F601      		movw r30,r12
 1089               	/* #APP */
 1090               	 ;  112 "graphics.c" 1
 1091 0100 4491      		lpm r20, Z
 1092               		
 1093               	 ;  0 "" 2
 1094               	.LVL93:
 1095               	/* #NOAPP */
 1096               	.LBE27:
 1097 0102 50E0      		ldi r21,0
 1098 0104 9401      		movw r18,r8
 1099 0106 0C2E      		mov r0,r28
 1100 0108 00C0      		rjmp 2f
 1101               		1:
 1102 010a 220F      		lsl r18
 1103 010c 331F      		rol r19
 1104               		2:
 1105 010e 0A94      		dec r0
 1106 0110 02F4      		brpl 1b
 1107 0112 4223      		and r20,r18
 1108 0114 5323      		and r21,r19
 1109               	.LVL94:
 1110 0116 0C2E      		mov r0,r28
 1111 0118 00C0      		rjmp 2f
 1112               		1:
 1113 011a 5595      		asr r21
 1114 011c 4795      		ror r20
 1115               		2:
 1116 011e 0A94      		dec r0
 1117 0120 02F4      		brpl 1b
 1118 0122 6C2F      		mov r22,r28
 1119 0124 6E0D      		add r22,r14
 111:graphics.c    ****                           (pgm_read_byte(&(ASCII[tens_place + 16][i])) & (1 << j)) >> j);
 1120               		.loc 1 111 0 discriminator 3
 1121 0126 872D      		mov r24,r7
 1122 0128 0E94 0000 		call set_pixel
 1123               	.LVL95:
 1124 012c 2196      		adiw r28,1
 1125               	.LVL96:
 1126 012e 00C0      		rjmp .L66
 1127               	.LVL97:
 1128               	.L76:
 1129 0130 0F5F      		subi r16,-1
 1130 0132 1F4F      		sbci r17,-1
 1131               	.LVL98:
 1132               	.LBE28:
 109:graphics.c    ****             for (unsigned char j = 0; j < char_height; j++) {
 1133               		.loc 1 109 0 discriminator 2
 1134 0134 0530      		cpi r16,5
 1135 0136 1105      		cpc r17,__zero_reg__
 1136 0138 01F4      		brne .L63
 1137 013a 00C0      		rjmp .L58
 1138               	.LVL99:
 1139               	.L77:
 1140 013c 0F5F      		subi r16,-1
 1141 013e 1F4F      		sbci r17,-1
 1142               	.LVL100:
 1143               	.LBE29:
 1144               	.LBE31:
 1145               	.LBB32:
 117:graphics.c    ****             for (unsigned char j = 0; j < char_height; j++) {
 1146               		.loc 1 117 0 discriminator 2
 1147 0140 0A30      		cpi r16,10
 1148 0142 1105      		cpc r17,__zero_reg__
 1149 0144 01F0      		breq .L58
 1150               	.LVL101:
 1151               	.L60:
 1152 0146 C501      		movw r24,r10
 1153 0148 800F      		add r24,r16
 1154 014a 911F      		adc r25,r17
 1155 014c 9C01      		movw r18,r24
 1156 014e 2050      		subi r18,lo8(-(ASCII))
 1157 0150 3040      		sbci r19,hi8(-(ASCII))
 1158 0152 6901      		movw r12,r18
 1159               	.LBE32:
 1160               	.LBB33:
 1161               	.LBB30:
 103:graphics.c    ****             for (unsigned char j = 0; j < char_height; j++) {
 1162               		.loc 1 103 0
 1163 0154 C0E0      		ldi r28,0
 1164 0156 D0E0      		ldi r29,0
 1165 0158 7F2C      		mov r7,r15
 1166 015a 700E      		add r7,r16
 1167               	.L69:
 1168               	.LVL102:
 1169               	.LBE30:
 1170               	.LBE33:
 1171               	.LBB34:
 1172               	.LBB18:
 118:graphics.c    ****                 set_pixel(top_left_x + i, top_left_y + j,
 1173               		.loc 1 118 0 discriminator 1
 1174 015c C830      		cpi r28,8
 1175 015e D105      		cpc r29,__zero_reg__
 1176 0160 01F0      		breq .L77
 1177               	.LVL103:
 1178               	.LBB17:
 1179               		.loc 1 120 0 discriminator 3
 1180 0162 F601      		movw r30,r12
 1181               	/* #APP */
 1182               	 ;  120 "graphics.c" 1
 1183 0164 4491      		lpm r20, Z
 1184               		
 1185               	 ;  0 "" 2
 1186               	.LVL104:
 1187               	/* #NOAPP */
 1188               	.LBE17:
 1189 0166 50E0      		ldi r21,0
 1190 0168 9401      		movw r18,r8
 1191 016a 0C2E      		mov r0,r28
 1192 016c 00C0      		rjmp 2f
 1193               		1:
 1194 016e 220F      		lsl r18
 1195 0170 331F      		rol r19
 1196               		2:
 1197 0172 0A94      		dec r0
 1198 0174 02F4      		brpl 1b
 1199 0176 4223      		and r20,r18
 1200 0178 5323      		and r21,r19
 1201               	.LVL105:
 1202 017a 0C2E      		mov r0,r28
 1203 017c 00C0      		rjmp 2f
 1204               		1:
 1205 017e 5595      		asr r21
 1206 0180 4795      		ror r20
 1207               		2:
 1208 0182 0A94      		dec r0
 1209 0184 02F4      		brpl 1b
 1210 0186 6C2F      		mov r22,r28
 1211 0188 6E0D      		add r22,r14
 119:graphics.c    ****                           (pgm_read_byte(&(ASCII[integer + 16][i])) & (1 << j)) >> j);
 1212               		.loc 1 119 0 discriminator 3
 1213 018a 872D      		mov r24,r7
 1214 018c 0E94 0000 		call set_pixel
 1215               	.LVL106:
 1216 0190 2196      		adiw r28,1
 1217               	.LVL107:
 1218 0192 00C0      		rjmp .L69
 1219               	.LVL108:
 1220               	.L58:
 1221               	/* epilogue start */
 1222               	.LBE18:
 1223               	.LBE34:
 121:graphics.c    ****             }
 122:graphics.c    ****         }
 123:graphics.c    ****     }
 124:graphics.c    **** }
 1224               		.loc 1 124 0
 1225 0194 DF91      		pop r29
 1226 0196 CF91      		pop r28
 1227 0198 1F91      		pop r17
 1228 019a 0F91      		pop r16
 1229 019c FF90      		pop r15
 1230               	.LVL109:
 1231 019e EF90      		pop r14
 1232               	.LVL110:
 1233 01a0 DF90      		pop r13
 1234 01a2 CF90      		pop r12
 1235 01a4 BF90      		pop r11
 1236 01a6 AF90      		pop r10
 1237 01a8 9F90      		pop r9
 1238 01aa 8F90      		pop r8
 1239 01ac 7F90      		pop r7
 1240 01ae 6F90      		pop r6
 1241 01b0 5F90      		pop r5
 1242 01b2 0895      		ret
 1243               		.cfi_endproc
 1244               	.LFE6:
 1246               		.section	.text.draw_string,"ax",@progbits
 1247               	.global	draw_string
 1249               	draw_string:
 1250               	.LFB7:
 125:graphics.c    **** 
 126:graphics.c    **** void draw_string(unsigned char top_left_x, unsigned char top_left_y, char *characters) {
 1251               		.loc 1 126 0
 1252               		.cfi_startproc
 1253               	.LVL111:
 1254 0000 0F93      		push r16
 1255               	.LCFI50:
 1256               		.cfi_def_cfa_offset 3
 1257               		.cfi_offset 16, -2
 1258 0002 1F93      		push r17
 1259               	.LCFI51:
 1260               		.cfi_def_cfa_offset 4
 1261               		.cfi_offset 17, -3
 1262 0004 CF93      		push r28
 1263               	.LCFI52:
 1264               		.cfi_def_cfa_offset 5
 1265               		.cfi_offset 28, -4
 1266 0006 DF93      		push r29
 1267               	.LCFI53:
 1268               		.cfi_def_cfa_offset 6
 1269               		.cfi_offset 29, -5
 1270               	/* prologue: function */
 1271               	/* frame size = 0 */
 1272               	/* stack size = 4 */
 1273               	.L__stack_usage = 4
 1274 0008 D62F      		mov r29,r22
 1275 000a 8A01      		movw r16,r20
 1276               	.LVL112:
 127:graphics.c    ****     unsigned char i = 0;
 128:graphics.c    **** 
 129:graphics.c    ****     // Draw each character until the null terminator is reached
 130:graphics.c    ****     while (*characters != 0) {
 1277               		.loc 1 130 0
 1278 000c C82F      		mov r28,r24
 1279               	.LVL113:
 1280               	.L79:
 1281 000e F801      		movw r30,r16
 1282 0010 4191      		ld r20,Z+
 1283 0012 8F01      		movw r16,r30
 1284               	.LVL114:
 1285 0014 4423      		tst r20
 1286 0016 01F0      		breq .L81
 131:graphics.c    ****         draw_char(top_left_x + i * 5, top_left_y, *(characters));
 1287               		.loc 1 131 0
 1288 0018 6D2F      		mov r22,r29
 1289 001a 8C2F      		mov r24,r28
 1290 001c 0E94 0000 		call draw_char
 1291               	.LVL115:
 1292 0020 CB5F      		subi r28,lo8(-(5))
 1293 0022 00C0      		rjmp .L79
 1294               	.LVL116:
 1295               	.L81:
 1296               	/* epilogue start */
 132:graphics.c    **** 
 133:graphics.c    ****         // Add a column of spaces here if you want to space out the lettering.
 134:graphics.c    ****         // (see lcd.c for a hint on how to do this)
 135:graphics.c    **** 
 136:graphics.c    ****         characters++;
 137:graphics.c    ****         i++;
 138:graphics.c    ****     }
 139:graphics.c    **** }
 1297               		.loc 1 139 0
 1298 0024 DF91      		pop r29
 1299               	.LVL117:
 1300 0026 CF91      		pop r28
 1301 0028 1F91      		pop r17
 1302 002a 0F91      		pop r16
 1303               	.LVL118:
 1304 002c 0895      		ret
 1305               		.cfi_endproc
 1306               	.LFE7:
 1308               		.comm	screen_buffer,504,1
 1309               		.section	.progmem.data,"a",@progbits
 1312               	ASCII:
 1313 0000 00        		.byte	0
 1314 0001 00        		.byte	0
 1315 0002 00        		.byte	0
 1316 0003 00        		.byte	0
 1317 0004 00        		.byte	0
 1318 0005 00        		.byte	0
 1319 0006 00        		.byte	0
 1320 0007 5F        		.byte	95
 1321 0008 00        		.byte	0
 1322 0009 00        		.byte	0
 1323 000a 00        		.byte	0
 1324 000b 07        		.byte	7
 1325 000c 00        		.byte	0
 1326 000d 07        		.byte	7
 1327 000e 00        		.byte	0
 1328 000f 14        		.byte	20
 1329 0010 7F        		.byte	127
 1330 0011 14        		.byte	20
 1331 0012 7F        		.byte	127
 1332 0013 14        		.byte	20
 1333 0014 24        		.byte	36
 1334 0015 2A        		.byte	42
 1335 0016 7F        		.byte	127
 1336 0017 2A        		.byte	42
 1337 0018 12        		.byte	18
 1338 0019 23        		.byte	35
 1339 001a 13        		.byte	19
 1340 001b 08        		.byte	8
 1341 001c 64        		.byte	100
 1342 001d 62        		.byte	98
 1343 001e 36        		.byte	54
 1344 001f 49        		.byte	73
 1345 0020 55        		.byte	85
 1346 0021 22        		.byte	34
 1347 0022 50        		.byte	80
 1348 0023 00        		.byte	0
 1349 0024 05        		.byte	5
 1350 0025 03        		.byte	3
 1351 0026 00        		.byte	0
 1352 0027 00        		.byte	0
 1353 0028 00        		.byte	0
 1354 0029 1C        		.byte	28
 1355 002a 22        		.byte	34
 1356 002b 41        		.byte	65
 1357 002c 00        		.byte	0
 1358 002d 00        		.byte	0
 1359 002e 41        		.byte	65
 1360 002f 22        		.byte	34
 1361 0030 1C        		.byte	28
 1362 0031 00        		.byte	0
 1363 0032 14        		.byte	20
 1364 0033 08        		.byte	8
 1365 0034 3E        		.byte	62
 1366 0035 08        		.byte	8
 1367 0036 14        		.byte	20
 1368 0037 08        		.byte	8
 1369 0038 08        		.byte	8
 1370 0039 3E        		.byte	62
 1371 003a 08        		.byte	8
 1372 003b 08        		.byte	8
 1373 003c 00        		.byte	0
 1374 003d 50        		.byte	80
 1375 003e 30        		.byte	48
 1376 003f 00        		.byte	0
 1377 0040 00        		.byte	0
 1378 0041 08        		.byte	8
 1379 0042 08        		.byte	8
 1380 0043 08        		.byte	8
 1381 0044 08        		.byte	8
 1382 0045 08        		.byte	8
 1383 0046 00        		.byte	0
 1384 0047 60        		.byte	96
 1385 0048 60        		.byte	96
 1386 0049 00        		.byte	0
 1387 004a 00        		.byte	0
 1388 004b 20        		.byte	32
 1389 004c 10        		.byte	16
 1390 004d 08        		.byte	8
 1391 004e 04        		.byte	4
 1392 004f 02        		.byte	2
 1393 0050 3E        		.byte	62
 1394 0051 51        		.byte	81
 1395 0052 49        		.byte	73
 1396 0053 45        		.byte	69
 1397 0054 3E        		.byte	62
 1398 0055 00        		.byte	0
 1399 0056 42        		.byte	66
 1400 0057 7F        		.byte	127
 1401 0058 40        		.byte	64
 1402 0059 00        		.byte	0
 1403 005a 42        		.byte	66
 1404 005b 61        		.byte	97
 1405 005c 51        		.byte	81
 1406 005d 49        		.byte	73
 1407 005e 46        		.byte	70
 1408 005f 21        		.byte	33
 1409 0060 41        		.byte	65
 1410 0061 45        		.byte	69
 1411 0062 4B        		.byte	75
 1412 0063 31        		.byte	49
 1413 0064 18        		.byte	24
 1414 0065 14        		.byte	20
 1415 0066 12        		.byte	18
 1416 0067 7F        		.byte	127
 1417 0068 10        		.byte	16
 1418 0069 27        		.byte	39
 1419 006a 45        		.byte	69
 1420 006b 45        		.byte	69
 1421 006c 45        		.byte	69
 1422 006d 39        		.byte	57
 1423 006e 3C        		.byte	60
 1424 006f 4A        		.byte	74
 1425 0070 49        		.byte	73
 1426 0071 49        		.byte	73
 1427 0072 30        		.byte	48
 1428 0073 01        		.byte	1
 1429 0074 71        		.byte	113
 1430 0075 09        		.byte	9
 1431 0076 05        		.byte	5
 1432 0077 03        		.byte	3
 1433 0078 36        		.byte	54
 1434 0079 49        		.byte	73
 1435 007a 49        		.byte	73
 1436 007b 49        		.byte	73
 1437 007c 36        		.byte	54
 1438 007d 06        		.byte	6
 1439 007e 49        		.byte	73
 1440 007f 49        		.byte	73
 1441 0080 29        		.byte	41
 1442 0081 1E        		.byte	30
 1443 0082 00        		.byte	0
 1444 0083 36        		.byte	54
 1445 0084 36        		.byte	54
 1446 0085 00        		.byte	0
 1447 0086 00        		.byte	0
 1448 0087 00        		.byte	0
 1449 0088 56        		.byte	86
 1450 0089 36        		.byte	54
 1451 008a 00        		.byte	0
 1452 008b 00        		.byte	0
 1453 008c 08        		.byte	8
 1454 008d 14        		.byte	20
 1455 008e 22        		.byte	34
 1456 008f 41        		.byte	65
 1457 0090 00        		.byte	0
 1458 0091 14        		.byte	20
 1459 0092 14        		.byte	20
 1460 0093 14        		.byte	20
 1461 0094 14        		.byte	20
 1462 0095 14        		.byte	20
 1463 0096 00        		.byte	0
 1464 0097 41        		.byte	65
 1465 0098 22        		.byte	34
 1466 0099 14        		.byte	20
 1467 009a 08        		.byte	8
 1468 009b 02        		.byte	2
 1469 009c 01        		.byte	1
 1470 009d 51        		.byte	81
 1471 009e 09        		.byte	9
 1472 009f 06        		.byte	6
 1473 00a0 32        		.byte	50
 1474 00a1 49        		.byte	73
 1475 00a2 79        		.byte	121
 1476 00a3 41        		.byte	65
 1477 00a4 3E        		.byte	62
 1478 00a5 7E        		.byte	126
 1479 00a6 11        		.byte	17
 1480 00a7 11        		.byte	17
 1481 00a8 11        		.byte	17
 1482 00a9 7E        		.byte	126
 1483 00aa 7F        		.byte	127
 1484 00ab 49        		.byte	73
 1485 00ac 49        		.byte	73
 1486 00ad 49        		.byte	73
 1487 00ae 36        		.byte	54
 1488 00af 3E        		.byte	62
 1489 00b0 41        		.byte	65
 1490 00b1 41        		.byte	65
 1491 00b2 41        		.byte	65
 1492 00b3 22        		.byte	34
 1493 00b4 7F        		.byte	127
 1494 00b5 41        		.byte	65
 1495 00b6 41        		.byte	65
 1496 00b7 22        		.byte	34
 1497 00b8 1C        		.byte	28
 1498 00b9 7F        		.byte	127
 1499 00ba 49        		.byte	73
 1500 00bb 49        		.byte	73
 1501 00bc 49        		.byte	73
 1502 00bd 41        		.byte	65
 1503 00be 7F        		.byte	127
 1504 00bf 09        		.byte	9
 1505 00c0 09        		.byte	9
 1506 00c1 09        		.byte	9
 1507 00c2 01        		.byte	1
 1508 00c3 3E        		.byte	62
 1509 00c4 41        		.byte	65
 1510 00c5 49        		.byte	73
 1511 00c6 49        		.byte	73
 1512 00c7 7A        		.byte	122
 1513 00c8 7F        		.byte	127
 1514 00c9 08        		.byte	8
 1515 00ca 08        		.byte	8
 1516 00cb 08        		.byte	8
 1517 00cc 7F        		.byte	127
 1518 00cd 00        		.byte	0
 1519 00ce 41        		.byte	65
 1520 00cf 7F        		.byte	127
 1521 00d0 41        		.byte	65
 1522 00d1 00        		.byte	0
 1523 00d2 20        		.byte	32
 1524 00d3 40        		.byte	64
 1525 00d4 41        		.byte	65
 1526 00d5 3F        		.byte	63
 1527 00d6 01        		.byte	1
 1528 00d7 7F        		.byte	127
 1529 00d8 08        		.byte	8
 1530 00d9 14        		.byte	20
 1531 00da 22        		.byte	34
 1532 00db 41        		.byte	65
 1533 00dc 7F        		.byte	127
 1534 00dd 40        		.byte	64
 1535 00de 40        		.byte	64
 1536 00df 40        		.byte	64
 1537 00e0 40        		.byte	64
 1538 00e1 7F        		.byte	127
 1539 00e2 02        		.byte	2
 1540 00e3 0C        		.byte	12
 1541 00e4 02        		.byte	2
 1542 00e5 7F        		.byte	127
 1543 00e6 7F        		.byte	127
 1544 00e7 04        		.byte	4
 1545 00e8 08        		.byte	8
 1546 00e9 10        		.byte	16
 1547 00ea 7F        		.byte	127
 1548 00eb 3E        		.byte	62
 1549 00ec 41        		.byte	65
 1550 00ed 41        		.byte	65
 1551 00ee 41        		.byte	65
 1552 00ef 3E        		.byte	62
 1553 00f0 7F        		.byte	127
 1554 00f1 09        		.byte	9
 1555 00f2 09        		.byte	9
 1556 00f3 09        		.byte	9
 1557 00f4 06        		.byte	6
 1558 00f5 3E        		.byte	62
 1559 00f6 41        		.byte	65
 1560 00f7 51        		.byte	81
 1561 00f8 21        		.byte	33
 1562 00f9 5E        		.byte	94
 1563 00fa 7F        		.byte	127
 1564 00fb 09        		.byte	9
 1565 00fc 19        		.byte	25
 1566 00fd 29        		.byte	41
 1567 00fe 46        		.byte	70
 1568 00ff 46        		.byte	70
 1569 0100 49        		.byte	73
 1570 0101 49        		.byte	73
 1571 0102 49        		.byte	73
 1572 0103 31        		.byte	49
 1573 0104 01        		.byte	1
 1574 0105 01        		.byte	1
 1575 0106 7F        		.byte	127
 1576 0107 01        		.byte	1
 1577 0108 01        		.byte	1
 1578 0109 3F        		.byte	63
 1579 010a 40        		.byte	64
 1580 010b 40        		.byte	64
 1581 010c 40        		.byte	64
 1582 010d 3F        		.byte	63
 1583 010e 1F        		.byte	31
 1584 010f 20        		.byte	32
 1585 0110 40        		.byte	64
 1586 0111 20        		.byte	32
 1587 0112 1F        		.byte	31
 1588 0113 3F        		.byte	63
 1589 0114 40        		.byte	64
 1590 0115 38        		.byte	56
 1591 0116 40        		.byte	64
 1592 0117 3F        		.byte	63
 1593 0118 63        		.byte	99
 1594 0119 14        		.byte	20
 1595 011a 08        		.byte	8
 1596 011b 14        		.byte	20
 1597 011c 63        		.byte	99
 1598 011d 07        		.byte	7
 1599 011e 08        		.byte	8
 1600 011f 70        		.byte	112
 1601 0120 08        		.byte	8
 1602 0121 07        		.byte	7
 1603 0122 61        		.byte	97
 1604 0123 51        		.byte	81
 1605 0124 49        		.byte	73
 1606 0125 45        		.byte	69
 1607 0126 43        		.byte	67
 1608 0127 00        		.byte	0
 1609 0128 7F        		.byte	127
 1610 0129 41        		.byte	65
 1611 012a 41        		.byte	65
 1612 012b 00        		.byte	0
 1613 012c 02        		.byte	2
 1614 012d 04        		.byte	4
 1615 012e 08        		.byte	8
 1616 012f 10        		.byte	16
 1617 0130 20        		.byte	32
 1618 0131 00        		.byte	0
 1619 0132 41        		.byte	65
 1620 0133 41        		.byte	65
 1621 0134 7F        		.byte	127
 1622 0135 00        		.byte	0
 1623 0136 04        		.byte	4
 1624 0137 02        		.byte	2
 1625 0138 01        		.byte	1
 1626 0139 02        		.byte	2
 1627 013a 04        		.byte	4
 1628 013b 40        		.byte	64
 1629 013c 40        		.byte	64
 1630 013d 40        		.byte	64
 1631 013e 40        		.byte	64
 1632 013f 40        		.byte	64
 1633 0140 00        		.byte	0
 1634 0141 01        		.byte	1
 1635 0142 02        		.byte	2
 1636 0143 04        		.byte	4
 1637 0144 00        		.byte	0
 1638 0145 20        		.byte	32
 1639 0146 54        		.byte	84
 1640 0147 54        		.byte	84
 1641 0148 54        		.byte	84
 1642 0149 78        		.byte	120
 1643 014a 7F        		.byte	127
 1644 014b 48        		.byte	72
 1645 014c 44        		.byte	68
 1646 014d 44        		.byte	68
 1647 014e 38        		.byte	56
 1648 014f 38        		.byte	56
 1649 0150 44        		.byte	68
 1650 0151 44        		.byte	68
 1651 0152 44        		.byte	68
 1652 0153 20        		.byte	32
 1653 0154 38        		.byte	56
 1654 0155 44        		.byte	68
 1655 0156 44        		.byte	68
 1656 0157 48        		.byte	72
 1657 0158 7F        		.byte	127
 1658 0159 38        		.byte	56
 1659 015a 54        		.byte	84
 1660 015b 54        		.byte	84
 1661 015c 54        		.byte	84
 1662 015d 18        		.byte	24
 1663 015e 08        		.byte	8
 1664 015f 7E        		.byte	126
 1665 0160 09        		.byte	9
 1666 0161 01        		.byte	1
 1667 0162 02        		.byte	2
 1668 0163 0C        		.byte	12
 1669 0164 52        		.byte	82
 1670 0165 52        		.byte	82
 1671 0166 52        		.byte	82
 1672 0167 3E        		.byte	62
 1673 0168 7F        		.byte	127
 1674 0169 08        		.byte	8
 1675 016a 04        		.byte	4
 1676 016b 04        		.byte	4
 1677 016c 78        		.byte	120
 1678 016d 00        		.byte	0
 1679 016e 44        		.byte	68
 1680 016f 7D        		.byte	125
 1681 0170 40        		.byte	64
 1682 0171 00        		.byte	0
 1683 0172 20        		.byte	32
 1684 0173 40        		.byte	64
 1685 0174 44        		.byte	68
 1686 0175 3D        		.byte	61
 1687 0176 00        		.byte	0
 1688 0177 7F        		.byte	127
 1689 0178 10        		.byte	16
 1690 0179 28        		.byte	40
 1691 017a 44        		.byte	68
 1692 017b 00        		.byte	0
 1693 017c 00        		.byte	0
 1694 017d 41        		.byte	65
 1695 017e 7F        		.byte	127
 1696 017f 40        		.byte	64
 1697 0180 00        		.byte	0
 1698 0181 7C        		.byte	124
 1699 0182 04        		.byte	4
 1700 0183 18        		.byte	24
 1701 0184 04        		.byte	4
 1702 0185 78        		.byte	120
 1703 0186 7C        		.byte	124
 1704 0187 08        		.byte	8
 1705 0188 04        		.byte	4
 1706 0189 04        		.byte	4
 1707 018a 78        		.byte	120
 1708 018b 38        		.byte	56
 1709 018c 44        		.byte	68
 1710 018d 44        		.byte	68
 1711 018e 44        		.byte	68
 1712 018f 38        		.byte	56
 1713 0190 7C        		.byte	124
 1714 0191 14        		.byte	20
 1715 0192 14        		.byte	20
 1716 0193 14        		.byte	20
 1717 0194 08        		.byte	8
 1718 0195 08        		.byte	8
 1719 0196 14        		.byte	20
 1720 0197 14        		.byte	20
 1721 0198 18        		.byte	24
 1722 0199 7C        		.byte	124
 1723 019a 7C        		.byte	124
 1724 019b 08        		.byte	8
 1725 019c 04        		.byte	4
 1726 019d 04        		.byte	4
 1727 019e 08        		.byte	8
 1728 019f 48        		.byte	72
 1729 01a0 54        		.byte	84
 1730 01a1 54        		.byte	84
 1731 01a2 54        		.byte	84
 1732 01a3 20        		.byte	32
 1733 01a4 04        		.byte	4
 1734 01a5 3F        		.byte	63
 1735 01a6 44        		.byte	68
 1736 01a7 40        		.byte	64
 1737 01a8 20        		.byte	32
 1738 01a9 3C        		.byte	60
 1739 01aa 40        		.byte	64
 1740 01ab 40        		.byte	64
 1741 01ac 20        		.byte	32
 1742 01ad 7C        		.byte	124
 1743 01ae 1C        		.byte	28
 1744 01af 20        		.byte	32
 1745 01b0 40        		.byte	64
 1746 01b1 20        		.byte	32
 1747 01b2 1C        		.byte	28
 1748 01b3 3C        		.byte	60
 1749 01b4 40        		.byte	64
 1750 01b5 30        		.byte	48
 1751 01b6 40        		.byte	64
 1752 01b7 3C        		.byte	60
 1753 01b8 44        		.byte	68
 1754 01b9 28        		.byte	40
 1755 01ba 10        		.byte	16
 1756 01bb 28        		.byte	40
 1757 01bc 44        		.byte	68
 1758 01bd 0C        		.byte	12
 1759 01be 50        		.byte	80
 1760 01bf 50        		.byte	80
 1761 01c0 50        		.byte	80
 1762 01c1 3C        		.byte	60
 1763 01c2 44        		.byte	68
 1764 01c3 64        		.byte	100
 1765 01c4 54        		.byte	84
 1766 01c5 4C        		.byte	76
 1767 01c6 44        		.byte	68
 1768 01c7 00        		.byte	0
 1769 01c8 08        		.byte	8
 1770 01c9 36        		.byte	54
 1771 01ca 41        		.byte	65
 1772 01cb 00        		.byte	0
 1773 01cc 00        		.byte	0
 1774 01cd 00        		.byte	0
 1775 01ce 7F        		.byte	127
 1776 01cf 00        		.byte	0
 1777 01d0 00        		.byte	0
 1778 01d1 00        		.byte	0
 1779 01d2 41        		.byte	65
 1780 01d3 36        		.byte	54
 1781 01d4 08        		.byte	8
 1782 01d5 00        		.byte	0
 1783 01d6 10        		.byte	16
 1784 01d7 08        		.byte	8
 1785 01d8 08        		.byte	8
 1786 01d9 10        		.byte	16
 1787 01da 08        		.byte	8
 1788 01db 78        		.byte	120
 1789 01dc 46        		.byte	70
 1790 01dd 41        		.byte	65
 1791 01de 46        		.byte	70
 1792 01df 78        		.byte	120
 1793               		.text
 1794               	.Letext0:
 1795               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/stdint.h"
 1796               		.file 3 "ascii_font.h"
 1797               		.file 4 "lcd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 graphics.c
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:4      *ABS*:000000000000003f __SREG__
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:13     .text.show_screen:0000000000000000 show_screen
                            *COM*:00000000000001f8 screen_buffer
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:62     .text.clear_screen:0000000000000000 clear_screen
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:92     .text.set_pixel:0000000000000000 set_pixel
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:176    .text.draw_line:0000000000000000 draw_line
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:654    .text.draw_char:0000000000000000 draw_char
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:1312   .progmem.data:0000000000000000 ASCII
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:836    .text.draw_int:0000000000000000 draw_int
/var/folders/np/kp2qd6tj6gg2bqln_7wk9w6h0000gn/T//ccwuVMST.s:1249   .text.draw_string:0000000000000000 draw_string

UNDEFINED SYMBOLS
lcd_position
lcd_write
__floatsisf
__divsf3
__gesf2
__addsf3
__gtsf2
__ltsf2
__subsf3
__divmodhi4
__do_clear_bss
